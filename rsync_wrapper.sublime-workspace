{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Rsync",
				"RsyncError"
			],
			[
				"handl",
				"handler1"
			],
			[
				"hand",
				"handler1"
			],
			[
				"ex",
				"except"
			],
			[
				"rs",
				"rsync_version"
			],
			[
				"long",
				"long_args"
			]
		]
	},
	"buffers":
	[
		{
			"file": "build.py",
			"settings":
			{
				"buffer_size": 1321,
				"line_ending": "Unix"
			}
		},
		{
			"file": "extract.py",
			"settings":
			{
				"buffer_size": 1626,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "import re\nimport pexpect\nfrom helpers import RsyncError, Job\nfrom pprint import pprint\n\nspawn = pexpect.spawn\n\nclass Rsync(object):\n  def __init__(self):\n    self._rex = 'rsync'\n    self._ver = None\n    self._all_opts = None\n\n  def set_executable(self, rex):\n    self._rex = rex;\n\n  def get_version(self):\n    \"\"\"Get the rsync version from the rsync command line.\"\"\"\n    rex = self._rex\n    ver = None\n\n    # TODO: Move the pexpect.spawn and exception handling into a mathod, perhaps __call__.\n    try:\n      rsync = pexpect.spawn(rex + u' --version')\n      i = rsync.expect(u'version\\D*([\\d\\.]+)')\n      ver = rsync.match.groups()[0]\n    except (pexpect.EOF, pexpect.TIMEOUT, IndexError) as ex:\n      raise RsyncError(u'version not found')\n    except pexpect.ExceptionPexpect as ex:\n      if u'command was not found or was not executable' in str(ex):\n        raise RsyncError(u'command not found')\n      else:\n        raise RsyncError(u'unknown')\n    self._ver = ver\n    return ver\n\n  def get_options(self):\n    \"\"\"Get rsync docs from the rsync command line.\"\"\"\n    rex = self._rex\n\n    rsync = pexpect.spawn(rex + u' --help')\n    i = rsync.expect(pexpect.EOF)\n    self._all_opts = self._parse_options(rsync.before)\n    return self._all_opts\n\n  def _parse_options(self, text):\n    \"\"\"Extract valid argument options from rsync docs.\"\"\"\n    short = {}\n    long = {}\n    for match in re_doc_opts.finditer(text):\n      g = match.groupdict()\n\n      # Split the same_as into individual long options, if it is found. (Couldn't be done in the regex).\n      g[u'same_as'] = filter(None, g[u'same_as'].split(u' --')) if g[u'same_as'] else None\n\n      if g[u'short']:\n        short[g[u'short']] = {u'long': g[u'long'], u'value': g.get(u'value'), u'same_as':g[u'same_as'], u'desc': g[u'desc']}\n      if g[u'long']:\n        long[g[u'long']] = {u'short': g[u'short'], u'value': g.get(u'value'), u'desc': g[u'desc']}\n\n    return {'short': short, 'long': long}\n\n  def run(self, job):\n    p = pexpect.spawn(command)\n\n  def list(self, job):\n    pass\n\n  def push(self, job):\n    pass\n\n  def pull(self, job):\n    pass\n\n  def sync(self, job):\n    pass\n\nre_doc_opts = re.compile(u'(?:(?:^\\s-(?P<short>[^-\\s,]),?)|(^\\s*))(?:(?:\\s--(?:(?:(?P<long>[^\\s=]+)=?(?P<value>[^-\\s]+)?(?:\\s*(?P<desc>.*$)))))|(?:\\s*same as(?P<same_as>\\s--.*$)*))', re.MULTILINE)\n\n\n\nr = Rsync()\npprint(r.options())",
			"file": "rsync.py",
			"file_size": 2279,
			"file_write_time": 131166457533881306,
			"settings":
			{
				"buffer_size": 2364,
				"line_ending": "Unix"
			}
		},
		{
			"file": "helpers.py",
			"settings":
			{
				"buffer_size": 4157,
				"line_ending": "Unix"
			}
		},
		{
			"file": "test.py",
			"settings":
			{
				"buffer_size": 29,
				"line_ending": "Unix"
			}
		},
		{
			"file": "__init__.py",
			"settings":
			{
				"buffer_size": 254,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 161.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"view ",
				"View: Toggle Menu"
			],
			[
				"view menu",
				"View: Toggle Menu"
			],
			[
				"pack",
				"Package Control: Install Package"
			]
		],
		"width": 508.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/adrien/Projects/code/py_rsync_wrapper",
		"/home/adrien/Projects/code/py_rsync_wrapper/src"
	],
	"file_history":
	[
		"/home/adrien/Projects/code/py_rsync_wrapper/eventful.py",
		"/home/adrien/Projects/code/py_rsync_wrapper/options.json",
		"/home/adrien/Projects/code/py_rsync_wrapper/src/rsync_options.txt",
		"/home/adrien/Projects/code/py_rsync_wrapper/.gitignore",
		"/home/adrien/Projects/code/py_rsync_wrapper/options.py",
		"/home/adrien/Projects/code/UnrealEngine/Engine/Build/BatchFiles/Linux/Setup.sh",
		"/home/adrien/Projects/code/UnrealEngine/Engine/Build/BatchFiles/Linux/BuildThirdParty.sh",
		"/home/adrien/Projects/code/UnrealEngine/Build/BatchFiles/Linux/BuildThirdParty.sh",
		"/home/adrien/Projects/code/UnrealEngine/Engine/Build/BatchFiles/Linux/BuildThirdParty.log",
		"/home/adrien/Projects/code/UnrealEngine/Setup.sh",
		"/home/adrien/Projects/code/py_rsync_wrapper/tools.py",
		"/home/adrien/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/home/adrien/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings"
	],
	"find":
	{
		"height": 45.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"_events",
			"same_as",
			"\"k",
			"k",
			"BuildHLSLCC",
			"CLANG_TO_USE",
			"3.8",
			"long_key",
			"import",
			"args",
			"size",
			"font"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"_emitter_events"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "build.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1321,
						"regions":
						{
						},
						"selection":
						[
							[
								1321,
								1321
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 69.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "extract.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1626,
						"regions":
						{
						},
						"selection":
						[
							[
								1626,
								1626
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 345.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "rsync.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2364,
						"regions":
						{
						},
						"selection":
						[
							[
								279,
								279
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "helpers.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4157,
						"regions":
						{
						},
						"selection":
						[
							[
								3736,
								3736
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2415.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "test.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29,
						"regions":
						{
						},
						"selection":
						[
							[
								27,
								27
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "__init__.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 254,
						"regions":
						{
						},
						"selection":
						[
							[
								254,
								254
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 31.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "rsync_wrapper.sublime-project",
	"replace":
	{
		"height": 86.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 263.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
